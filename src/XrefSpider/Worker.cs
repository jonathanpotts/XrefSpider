using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace XrefSpider
{
    /// <summary>
    /// XrefSpider worker that runs on the .NET generic host.
    /// </summary>
    public class Worker : IHostedService
    {
        /// <summary>
        /// Output file name.
        /// </summary>
        public static string FileName { get; set; }

        /// <summary>
        /// Application lifetime.
        /// </summary>
        private readonly IHostApplicationLifetime _appLifetime;

        /// <summary>
        /// Logger.
        /// </summary>
        private readonly ILogger _logger;

        /// <summary>
        /// Spider.
        /// </summary>
        private readonly ISpider _spider;

        /// <summary>
        /// Creates an instance of the XrefSpider worker.
        /// </summary>
        /// <param name="appLifetime">Application lifetime.</param>
        /// <param name="spider">Spider.</param>
        public Worker(IHostApplicationLifetime appLifetime, ILogger<Worker> logger, ISpider spider)
        {
            _appLifetime = appLifetime;
            _logger = logger;
            _spider = spider;
        }

        /// <summary>
        /// Triggered when the application host is starting.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token.</param>
        /// <returns>Task to perform while the application host is starting.</returns>
        public Task StartAsync(CancellationToken cancellationToken)
        {
            _appLifetime.ApplicationStarted.Register(() => Task.Run(OnStartedAsync));

            return Task.CompletedTask;
        }

        /// <summary>
        /// Triggered when the application host has started.
        /// </summary>
        /// <returns>Task to perform after the application host has started.</returns>
        public async Task OnStartedAsync()
        {
            var startTime = DateTime.Now;
            _logger.LogInformation($"Work started at {startTime}");

            var xrefMap = await _spider.CrawlAsync();

            if (xrefMap is null)
            {
                _logger.LogError($"The spider was unable to create the xref map");
                _appLifetime.StopApplication();
                return;
            }

            xrefMap = $"# Generated by XrefSpider (https://github.com/jonathanpotts/XrefSpider)\n{xrefMap}";

            using var file = File.Create(FileName);
            using var sw = new StreamWriter(file);
            await sw.WriteAsync(xrefMap);

            var endTime = DateTime.Now;
            _logger.LogInformation($"Work finished at {endTime}");

            var elapsedTime = endTime - startTime;
            _logger.LogInformation($"Total elapsed time is {elapsedTime}");

            _appLifetime.StopApplication();
        }

        /// <summary>
        /// Triggered when the application host is shutting down.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token.</param>
        /// <returns>Task to perform while the application host is shutting down.</returns>
        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }
    }
}
